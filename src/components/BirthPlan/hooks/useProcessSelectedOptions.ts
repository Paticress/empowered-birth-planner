
import { useCallback } from 'react';
import { birthPlanSections } from '../utils/birthPlanSections';

type UseProcessSelectedOptionsParams = {
  activeSectionIndex: number;
  activeFieldKey: string;
  selectedOptions: Record<string, Record<string, boolean>>;
  localBirthPlan: Record<string, any>;
  setLocalBirthPlan: (plan: Record<string, any>) => void;
  completedSections: string[];
  setCompletedSections: (sections: string[]) => void;
  setSelectedOptions: React.Dispatch<React.SetStateAction<Record<string, Record<string, boolean>>>>;
  setDialogOpen: (open: boolean) => void;
  textareaValues: Record<string, string>;
  setTextareaValues: (values: Record<string, string>) => void;
};

export function useProcessSelectedOptions({
  activeSectionIndex,
  activeFieldKey,
  selectedOptions,
  localBirthPlan,
  setLocalBirthPlan,
  completedSections,
  setCompletedSections,
  setSelectedOptions,
  setDialogOpen,
  textareaValues,
  setTextareaValues
}: UseProcessSelectedOptionsParams) {
  
  const processAddSelectedOptions = useCallback(() => {
    // Strategic logging for debugging option selection
    console.log("‚ûï Adicionando op√ß√µes ao campo:", activeFieldKey);
    console.log("üìã Op√ß√µes atualmente selecionadas:", selectedOptions);
    console.log("üß† Textareas preenchidos:", textareaValues);
    console.log("üìÑ Conte√∫do atual do birthPlan:", localBirthPlan);

    // Verificar a estrutura atual da se√ß√£o ativa
    const currentActiveSection = birthPlanSections[activeSectionIndex];
    if (currentActiveSection) {
      console.log("üîç Se√ß√£o ativa:", currentActiveSection.id);
      console.log("üîç Campo ativo:", activeFieldKey);
      
      // Verificar se o localBirthPlan tem a estrutura correta
      if (!localBirthPlan[currentActiveSection.id]) {
        console.log("‚ö†Ô∏è Se√ß√£o n√£o existe no localBirthPlan, criando...");
        setLocalBirthPlan({
          ...localBirthPlan,
          [currentActiveSection.id]: {}
        });
      }
    }

    // Debug para campos especiais
    if (['emergencyScenarios', 'highRiskComplications', 'lowRiskOccurrences'].includes(activeFieldKey)) {
      console.log(`Processando campo especial: ${activeFieldKey}`);
      
      // Verificar todas as op√ß√µes dispon√≠veis para este campo
      if (selectedOptions[activeFieldKey]) {
        console.log(`Verificando op√ß√µes dispon√≠veis:`, selectedOptions[activeFieldKey]);
        Object.entries(selectedOptions[activeFieldKey]).forEach(([option, isSelected]) => {
          console.log(`${option}: ${isSelected}`);
        });
      } else {
        console.log(`Nenhuma op√ß√£o dispon√≠vel para ${activeFieldKey}`);
      }
    }

    // Usar o hook personalizado para processar as op√ß√µes
    const currentSection = birthPlanSections[activeSectionIndex];
    if (!localBirthPlan[currentSection.id]) {
      // Certifique-se de que a se√ß√£o existe antes de adicionar op√ß√µes
      const updatedPlan = {
        ...localBirthPlan,
        [currentSection.id]: {}
      };
      setLocalBirthPlan(updatedPlan);
    }

    // Processar as op√ß√µes selecionadas e textareas
    const selectedItems: string[] = [];
    let hasSelections = false;
    
    // Capturar todas as op√ß√µes selecionadas (para todos os questionIds relacionados ao campo)
    Object.entries(selectedOptions).forEach(([questionId, options]) => {
      const selectedForQuestion = Object.entries(options)
        .filter(([_, isSelected]) => isSelected === true) // Verificar explicitamente se √© true
        .map(([option]) => option.trim());
      
      if (selectedForQuestion.length > 0) {
        hasSelections = true;
        selectedItems.push(...selectedForQuestion);
      }
    });
    
    // Capturar qualquer texto de textareas
    Object.values(textareaValues)
      .map(text => text.trim())
      .filter(Boolean)
      .forEach(text => {
        hasSelections = true;
        selectedItems.push(text);
      });
    
    // Debug para campos espec√≠ficos
    if (['emergencyScenarios', 'highRiskComplications', 'lowRiskOccurrences'].includes(activeFieldKey)) {
      console.log(`Op√ß√µes finais para ${activeFieldKey}:`, selectedItems);
      console.log(`Tem sele√ß√µes: ${hasSelections}`);
    }
    
    // Se temos op√ß√µes selecionadas, vamos atualizar o campo
    if (hasSelections && selectedItems.length > 0) {
      console.log("üîç Op√ß√µes selecionadas finais:", selectedItems);
      
      // Formatar com v√≠rgula e espa√ßo para melhor legibilidade
      const formattedText = selectedItems.join(', ');
      
      // Atualizar o plano de parto com o texto formatado
      const updatedSection = {
        ...localBirthPlan[currentSection.id],
        [activeFieldKey]: formattedText
      };
      
      const updatedPlan = {
        ...localBirthPlan,
        [currentSection.id]: updatedSection
      };
      
      console.log("üîç Atualizando plano com:", formattedText);
      setLocalBirthPlan(updatedPlan);
      
      // Marcar a se√ß√£o como conclu√≠da se ainda n√£o estiver
      if (!completedSections.includes(activeFieldKey)) {
        setCompletedSections([...completedSections, activeFieldKey]);
      }
    } else {
      console.log("‚ö†Ô∏è Nenhuma op√ß√£o selecionada, pulando atualiza√ß√£o do plano");
    }
    
    // Limpar sele√ß√µes e fechar di√°logo
    setSelectedOptions({});
    setTextareaValues({});
    setDialogOpen(false);
  }, [
    activeSectionIndex,
    activeFieldKey,
    selectedOptions,
    localBirthPlan,
    textareaValues,
    completedSections,
    setLocalBirthPlan,
    setCompletedSections,
    setSelectedOptions,
    setTextareaValues,
    setDialogOpen
  ]);

  return { processAddSelectedOptions };
}
